using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace FingerPrint.Controllers{

    public class EnrollmentController: Form, DPFP.Capture.EventHandler{

		public EnrollmentController()
		{
			// InitializeComponent();
            Init();            
			// Create a console input handler
            dummyForm = new Form();
            // dummyForm.Visible = false;
            // dummyForm.ShowInTaskbar = false; 
            // dummyForm.FormBorderStyle = FormBorderStyle.None; 
            // dummyForm.Opacity = 0;
            // dummyForm.Size = new System.Drawing.Size(1, 1);
			// dummyForm.Enabled = false; 
			// dummyForm.ShowIcon = false;
			// dummyForm.WindowState = FormWindowState.Minimized;
			// dummyForm.TopMost = false;
			// dummyForm.StartPosition = FormStartPosition.Manual;
		}

		// Add a method to ensure events are processed
		// public void ProcessEvents()
		// {
		// 	Application.DoEvents();
		// }
		
		// Override CreateHandle to ensure the form handle is created
		// protected override void CreateHandle()
		// {
		// 	base.CreateHandle();
		// 	Console.WriteLine("Form handle created.");
		// }

		protected void Init()
		{
            try
            {
                Capturer = new DPFP.Capture.Capture();				// Create a capture operation.

                if ( null != Capturer )
                    Capturer.EventHandler = this;					// Subscribe for capturing events.
                else
                    Console.WriteLine("Can't initiate capture operation!");
            }
            catch
            {               
                Console.WriteLine("Can't initiate capture operation!");            
            }
		}

		protected virtual void Process(DPFP.Sample Sample)
		{
			// Draw fingerprint sample image.
            Bitmap fingerprintBitmap = ConvertSampleToBitmap(Sample);

		}

		protected Bitmap ConvertSampleToBitmap(DPFP.Sample Sample)
		{
			DPFP.Capture.SampleConversion Convertor = new DPFP.Capture.SampleConversion();	// Create a sample convertor.
			Bitmap bitmap = null;												            // TODO: the size doesn't matter
			Convertor.ConvertToPicture(Sample, ref bitmap);									// TODO: return bitmap as a result
			return bitmap;
		}

		protected DPFP.FeatureSet ExtractFeatures(DPFP.Sample Sample, DPFP.Processing.DataPurpose Purpose)
		{
			DPFP.Processing.FeatureExtraction Extractor = new DPFP.Processing.FeatureExtraction();	// Create a feature extractor
			DPFP.Capture.CaptureFeedback feedback = DPFP.Capture.CaptureFeedback.None;
			DPFP.FeatureSet features = new DPFP.FeatureSet();
			Extractor.CreateFeatureSet(Sample, Purpose, ref feedback, ref features);			// TODO: return features as a result?
			if (feedback == DPFP.Capture.CaptureFeedback.Good)
				return features;
			else
				return null;
		}
		public void Start()
		{
            if (null != Capturer)
            {
                try
                {
                    Capturer.StartCapture();
                    Console.WriteLine("Using the fingerprint reader, scan your fingerprint.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Can't initiate capture! {ex.Message}");
                }
            }else{
				Console.WriteLine("Capturer is null.");
			}
		}

		public void Stop()
		{
            if (null != Capturer)
            {
                try
                {
                    Capturer.StopCapture();
					Console.WriteLine("terminated");
					Application.Exit();
                }
                catch
                {
                    Console.WriteLine("Can't terminate capture!");
                }
            }else{
				Console.WriteLine("Capturer is null");
			}
		}
		public void OnComplete(object Capture, string ReaderSerialNumber, DPFP.Sample Sample)
		{
			Console.WriteLine("The fingerprint sample was captured.");
			Console.WriteLine("Scan the same fingerprint again.");
			ProcessEnrollment(Sample);
		}

		public void OnFingerGone(object Capture, string ReaderSerialNumber)
		{
			Console.WriteLine("The finger was removed from the fingerprint reader.");
		}

		public void OnFingerTouch(object Capture, string ReaderSerialNumber)
		{
			Console.WriteLine("The fingerprint reader was touched.");
		}

		public void OnReaderConnect(object Capture, string ReaderSerialNumber)
		{
			Console.WriteLine($"{ReaderSerialNumber}: The fingerprint reader was connected.");
		}

		public void OnReaderDisconnect(object Capture, string ReaderSerialNumber)
		{
			Console.WriteLine($"{ReaderSerialNumber}: The fingerprint reader was disconnected.");
		}

		public void OnSampleQuality(object Capture, string ReaderSerialNumber, DPFP.Capture.CaptureFeedback CaptureFeedback)
		{
			if (CaptureFeedback == DPFP.Capture.CaptureFeedback.Good)
				Console.WriteLine("The quality of the fingerprint sample is good.");
			else
				Console.WriteLine("The quality of the fingerprint sample is poor.");
		}

        private DPFP.Capture.Capture Capturer;

		public void StartEnrollment(){
			Enroller = new DPFP.Processing.Enrollment();
			UpdateStatus();
			Application.Run(dummyForm);
			// Start a timer to check for console input
			// System.Windows.Forms.Timer inputTimer = new System.Windows.Forms.Timer();
			// inputTimer.Interval = 100;
			// inputTimer.Tick += (sender, e) => {
			//     if (Console.KeyAvailable) {
			//         var key = Console.ReadKey(true);
			//         if (key.Key == ConsoleKey.Enter) {
			//             inputTimer.Stop();
			//             Application.Exit();
			//         }
			//     }
			// };
			// inputTimer.Start();
		}

		public void ProcessEnrollment(DPFP.Sample Sample)
		{
			Process(Sample);

			// Process the sample and create a feature set for the enrollment purpose.
			DPFP.FeatureSet features = ExtractFeatures(Sample, DPFP.Processing.DataPurpose.Enrollment);

			// Check quality of the sample and add to enroller if it's good
			if (features != null) try
			{
				Console.WriteLine("The fingerprint feature set was created.");
				Enroller.AddFeatures(features);		// Add feature set to template.
				Console.WriteLine("Sample Received.");
				// Console.WriteLine(Enroller.Template.Serialize());
				// Check if the template is ready
				// if (Enroller.TemplateStatus == DPFP.Processing.Enrollment.Status.Ready)
				// {
				// 	// Serialize the template to byte array
				// 	byte[] serializedTemplate = null;
				// 	Enroller.Template.Serialize(ref serializedTemplate);
					
				// 	// Convert to Base64 string for display or storage
				// 	string base64Template = Convert.ToBase64String(serializedTemplate);
				// 	Console.WriteLine("Serialized Template (Base64): " + base64Template);
					
				// 	// You can also save the raw bytes to a file
				// 	// System.IO.File.WriteAllBytes("fingerprint.template", serializedTemplate);
				// }
			}
			finally {
				UpdateStatus();

				// Check if template has been created.
				switch(Enroller.TemplateStatus)
				{
					case DPFP.Processing.Enrollment.Status.Ready:	// report success and stop capturing
						OnTemplate(Enroller.Template);
						Console.WriteLine("Enrollment Completed.");
						base64Template = SerializeEnrollment(Enroller);
						Stop();
						break;

					case DPFP.Processing.Enrollment.Status.Failed:	// report failure and restart capturing
						Enroller.Clear();
						Stop();
						UpdateStatus();
						OnTemplate(null);
						Start();
						break;
				}
			}
		}
		private void UpdateStatus()
		{
			// Show number of samples needed.
			Console.WriteLine(String.Format("Fingerprint samples needed: {0}", Enroller.FeaturesNeeded));
		}

		public string SerializeEnrollment(DPFP.Processing.Enrollment enrollment){
			byte[] serializedTemplate = null;
			enrollment.Template.Serialize(ref serializedTemplate);
			// Convert to Base64 string for display or storage
			string base64Template = Convert.ToBase64String(serializedTemplate);
			Console.WriteLine("Serialized Template (Base64): " + base64Template);
			return base64Template;
		}

		public void DeSerializeEnrollment(string base64Template){
			try{
				DPFP.Template template = new DPFP.Template();
				// Deserialize the template from the byte array
				template.DeSerialize(Convert.FromBase64String(base64Template));
				// Process the loaded template
				OnTemplate(template);
				
				Console.WriteLine("Template loaded successfully");
			}catch (Exception ex)
			{
				Console.WriteLine("Error loading template: " + ex.Message);
				// Console.WriteLine(ex);
			}
		}
		private DPFP.Processing.Enrollment Enroller;

		private void OnTemplate(DPFP.Template template){
			Template = template;
		}
		private DPFP.Template Template;

		public string GetBase64Template(){

			return base64Template;
		}
		private string base64Template = string.Empty;

		protected Form dummyForm;
    }
}